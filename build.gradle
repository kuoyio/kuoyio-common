plugins {
    alias(libs.plugins.java)
    alias(libs.plugins.springboot)
    alias(libs.plugins.spring.dependency.management)
    alias(libs.plugins.maven.publish)
    alias(libs.plugins.jacoco)
}

group = 'io.github.kuoyio'
version = '0.0.25'

bootJar {
    enabled = false
}

jar {
    enabled = true
    archiveClassifier = ''
}

java {
    sourceCompatibility = JavaLanguageVersion.of(libs.versions.java.get())
    targetCompatibility = JavaLanguageVersion.of(libs.versions.java.get())
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation libs.project.lombok
    implementation libs.jakarta.persistence
    implementation libs.spring.web
    implementation libs.spring.boot.starter.data.jpa
    implementation libs.json.web.token
    annotationProcessor libs.project.lombok
    
    testImplementation libs.bundles.test
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            pom {
                name = 'kuoyio-common'
                description = 'Common utilities and configurations for Kuoyio services'
                url = 'https://github.com/kuoyio/kuoyio-common'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'kuoyio'
                        name = 'Kuoyio'
                        email = 'admin@kuoyio.cn'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/kuoyio/kuoyio-common"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/domain/exception/**',
            ])
        }))
    }

    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    '**/domain/exception/**',
                    '**/domain/response/**',
            ]
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
